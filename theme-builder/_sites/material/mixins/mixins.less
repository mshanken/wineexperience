// Placeholder text
.material-placeholder(@rules) {
  &::-moz-placeholder { @rules(); } // Firefox
  &:-ms-input-placeholder { @rules(); } // Internet Explorer 10+
  &::-webkit-input-placeholder  { @rules(); } // Safari and Chrome
}


// usage: .variations(~" .check", color, transparent);
.variations(@component, @selector-suffix, @property, @color-default) {
  .generic-variations(@component, @selector-suffix, @color-default, {
    @{property}: @variation-color;
  });
}



.background-variations(@component, @selector-suffix, @color-default) {
  .generic-variations(@component, @selector-suffix, @color-default, {
    background-color: @variation-color;
    & when (@variation-color = @mdb-btn-background-color) {
      color: @mdb-text-color-primary;
    }
    & when not (@variation-color = @mdb-btn-background-color) {
      color: @variation-color-text;
    }
  });
}

.text-variations(@component, @selector-suffix, @color-default) {
  .generic-variations(@component, @selector-suffix, @color-default, {
    color: @variation-color;
  });
}



//
// To use this mixin you should pass a function as final parameter to define
// the style. In that definition you can use the following variables to define it.
//
// @component: ~".btn" - one of the bs components that have -default, -danger, etc.
// @variation-color
// @variation-color-text
//
.generic-variations(@component, @selector-suffix, @color-default, @func) {
  @contrast-factor: 40%;
  // bootstrap styles
  &@{selector-suffix},
  &@{component}-default@{selector-suffix} {
    @variation-color: @color-default;
    @variation-color-text: @mdb-text-color-light;
    @func();
  }
  &@{component}-inverse@{selector-suffix} {
    @variation-color: @mdb-brand-inverse;
    //@variation-color-text: contrast(@mdb-brand-inverse, @mdb-text-color-primary, @mdb-text-color-light, @contrast-factor);
    @variation-color-text: contrast(@mdb-brand-inverse, @mdb-text-color-primary-hex, @mdb-text-color-light-hex, @contrast-factor);
    @func();
  }
  &@{component}-primary@{selector-suffix} {
    @variation-color: @brand-primary;
    @variation-color-text: @mdb-text-color-light;
    @func();
  }
  &@{component}-success@{selector-suffix} {
    @variation-color: @brand-success;
    @variation-color-text: @mdb-text-color-light;
    @func();
  }
  &@{component}-info@{selector-suffix} {
    @variation-color: @brand-info;
    @variation-color-text: @mdb-text-color-light;
    @func();
  }
  &@{component}-warning@{selector-suffix} {
    @variation-color: @brand-warning;
    @variation-color-text: @mdb-text-color-light;
    @func();
  }
  &@{component}-danger@{selector-suffix} {
    @variation-color: @brand-danger;
    @variation-color-text: @mdb-text-color-light;
    @func();
  }
}

.shadow-z-1() {
  box-shadow:
    0 1px 6px 0 rgba(0, 0, 0, 0.12),
    0 1px  6px 0 rgba(0, 0, 0, 0.12);
}

.shadow-z-1-hover() {
  box-shadow:
    0 5px 11px 0 rgba(0, 0, 0, 0.18),
    0 4px 15px 0 rgba(0, 0, 0, 0.15);
}

.shadow-z-2() {
  box-shadow:
    0 8px 17px 0 rgba(0, 0, 0, 0.2),
    0 6px 20px 0 rgba(0, 0, 0, 0.19);
}

.shadow-z-3() {
  box-shadow:
    0 12px 15px 0 rgba(0, 0, 0, 0.24),
    0 17px 50px 0 rgba(0, 0, 0, 0.19);
}

.shadow-z-4() {
  box-shadow:
    0 16px 28px 0 rgba(0, 0, 0, 0.22),
    0 25px 55px 0 rgba(0, 0, 0, 0.21);
}

.shadow-z-5() {
  box-shadow:
    0 27px 24px 0 rgba(0, 0, 0, 0.2),
    0 40px 77px 0 rgba(0, 0, 0, 0.22);
}


/* Shadows (from mdl http://www.getmdl.io/) */

// Focus shadow mixin.
.focus-shadow() {
  box-shadow: 0 0 8px rgba(0,0,0,.18),
  0 8px 16px rgba(0,0,0,.36);
}

.shadow-2dp() {
  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, @mdb-shadow-key-penumbra-opacity),
  0 3px 1px -2px rgba(0, 0, 0, @mdb-shadow-key-umbra-opacity),
  0 1px 5px 0 rgba(0, 0, 0, @mdb-shadow-ambient-shadow-opacity);
}
.shadow-3dp() {
  box-shadow: 0 3px 4px 0 rgba(0, 0, 0, @mdb-shadow-key-penumbra-opacity),
  0 3px 3px -2px rgba(0, 0, 0, @mdb-shadow-key-umbra-opacity),
  0 1px 8px 0 rgba(0, 0, 0, @mdb-shadow-ambient-shadow-opacity);
}
.shadow-4dp() {
  box-shadow: 0 4px 5px 0 rgba(0, 0, 0, @mdb-shadow-key-penumbra-opacity),
  0 1px 10px 0 rgba(0, 0, 0, @mdb-shadow-ambient-shadow-opacity),
  0 2px 4px -1px rgba(0, 0, 0, @mdb-shadow-key-umbra-opacity);
}
.shadow-6dp() {
  box-shadow: 0 6px 10px 0 rgba(0, 0, 0, @mdb-shadow-key-penumbra-opacity),
  0 1px 18px 0 rgba(0, 0, 0, @mdb-shadow-ambient-shadow-opacity),
  0 3px 5px -1px rgba(0, 0, 0, @mdb-shadow-key-umbra-opacity);
}
.shadow-8dp() {
  box-shadow: 0 8px 10px 1px rgba(0, 0, 0, @mdb-shadow-key-penumbra-opacity),
  0 3px 14px 2px rgba(0, 0, 0, @mdb-shadow-ambient-shadow-opacity),
  0 5px 5px -3px rgba(0, 0, 0, @mdb-shadow-key-umbra-opacity);
}

.shadow-16dp() {
  box-shadow: 0 16px 24px 2px rgba(0, 0, 0, @mdb-shadow-key-penumbra-opacity),
  0  6px 30px 5px rgba(0, 0, 0, @mdb-shadow-ambient-shadow-opacity),
  0  8px 10px -5px rgba(0, 0, 0, @mdb-shadow-key-umbra-opacity);
}

.shadow-24dp() {
  box-shadow: 0  9px 46px  8px rgba(0, 0, 0, @mdb-shadow-key-penumbra-opacity),
  0 11px 15px -7px rgba(0, 0, 0, @mdb-shadow-ambient-shadow-opacity),
  0 24px 38px  3px rgba(0, 0, 0, @mdb-shadow-key-umbra-opacity);
}
